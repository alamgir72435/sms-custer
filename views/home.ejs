<%- include('./partials/header') %>
<div class="container">
	<div class="row">
		<div class="col-md-8 card p-3">
			<div class="card-title">All Sms</div>
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>SL</th>
						<th>number</th>
						<th>Body</th>
						<th>Time</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody id="output"></tbody>
			</table>
			<div class="spinner-border text-center mx-auto" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>

		<div class="col-md-4 card p-3">
			<div class="d-flex flex-row justify-content-between">
				<div>
					<img style="display: none" id="sending" src="./sending.gif" alt="" />
				</div>
				<button id="sync" class="btn btn-lg">
					<i id="sync-memessage-icon" class="fas fa-sync"></i>
				</button>
			</div>
			<hr />
			<div class="card-title">Summery</div>
			<h3>In Queue : <span id="in-queue"></span></h3>
			<h3>Total Sent : <span id="totalSent"></span></h3>
		</div>
	</div>
</div>

<script>
	async function LoadData() {
		try {
			const res = await fetch("/message/all").then((res) => res.json());
			let output = document.getElementById("output");
			let serial = 0;
			let inQueue = Array.from(res).filter((x) => !x.status);
			$("#in-queue").text(inQueue.length);
			let sended = Array.from(res).filter((x) => x.status);
			$("#totalSent").text(sended.length);
			let messages = [...inQueue, ...sended];
			// Hide Spinner
			document.querySelector(".spinner-border").style.display = "none";
			let rows = "";
			for (let message of messages) {
				serial++;
				let status = "";
				if (message.status) {
					status = '<div class="badge bg-success">Sent</div>';
				} else {
					status = '<div class="badge bg-warning">in queue</div>';
				}
				rows += `
				<tr>
					<td>${serial}</td>
					<td>${message.number}</td>
					<td>${message.body}</td>
					<td> please wait</td>
					<td>
						${status}
					</td>
				</tr>
				`;
			}
			output.innerHTML = rows;
			// Datatable
			$(".table").DataTable({
				retrieve: true,
				destroy: true,
			});
		} catch (error) {
			console.log("Error Occured");
		}
	}
	LoadData();

	document.getElementById("sync").addEventListener("click", () => {
		$("#sync-memessage-icon").addClass("fa-spin");
		// sent request to smartphone to send queue message
		socket.emit("sync", {});
		setTimeout(() => {
			LoadData();
			$("#sync-memessage-icon").removeClass("fa-spin");
		}, 8000);
	});

	function showSendingLight() {
		$("#sending").show();
		setTimeout(() => {
			$("#sending").hide();
			LoadData();
		}, 10000);
	}

	// light on  of
	socket.on("all", (data) => {
		console.log("Sending Request ...");
		showSendingLight();
	});
</script>
